name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  push_compose:
    name: Push docker-compose.yaml to remote server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: "195.133.147.161"
          username: "github-review-bot"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/github-review-bot"

  build_and_push_images:
    name: Push image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Review Bot Build and Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile
          push: true
          tags: nekromant322/review-bot

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build_and_push_images, push_compose]
    steps:
      - name: Connect with SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: "195.133.147.161"
          username: "github-review-bot"
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo REVIEW_BOT_DB_USER = ${{ secrets.REVIEW_BOT_DB_USER }} >> review-bot-env.txt
            echo REVIEW_BOT_DB_PASSWORD = ${{ secrets.REVIEW_BOT_DB_PASSWORD }} >> review-bot-env.txt
            echo TELEGRAM_BOT_TOKEN = ${{ secrets.TELEGRAM_BOT_TOKEN }} >> review-bot-env.txt
            echo TELEGRAM_BOT_NAME = MentoringReviewBot >> review-bot-env.txt
            echo LIFE_PAY_LOGIN = ${{ secrets.LIFE_PAY_LOGIN }} >> review-bot-env.txt
            echo LIFE_PAY_KEY = ${{ secrets.LIFE_PAY_KEY }} >> review-bot-env.txt
            echo OWNER_PASSWORD = ${{secrets.OWNER_PASSWORD}} >> review-bot-env.txt
            
            sudo -S docker stop review-bot
            sudo -S docker rm review-bot
            sudo -S docker rmi nekromant322/review-bot
            sudo -S docker compose -f docker-compose.yml --env-file=review-bot-env.txt up -d
            sudo -S docker ps -a  
            
            # rm review-bot-env.txt

env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        DOCKERHUB_REPO: https://github.com/annov4/Spring_Crud_security2.0
        DOCKER_IMAGE_NAME: annov4/spring_crud_annov4
        REMOTE_SERVER: ${{ secrets.REMOTE_SERVER }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}


        build-and-deploy:
          runs-on: ubuntu-latest

          steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Log in to DockerHub
              run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            - name: Build Docker image
              run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest .

            - name: Push Docker image to DockerHub
              run: docker push ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

            - name: Copy docker-compose.yml to remote server
              uses: appleboy/scp-action@v0.1.6
              with:
                host: ${{ env.REMOTE_SERVER }}
                username: ${{ env.REMOTE_USER }}
                key: ${{ env.SSH_PRIVATE_KEY }}
                source: './docker-compose.yml'
                target: '~/path/to/target/directory/' # Замените на путь до целевого каталога на сервере

            - name: Deploy application
              if: success()
              run: |
                ssh -i ${{ env.SSH_PRIVATE_KEY }} ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} << 'EOF'
                  cd ~/path/to/target/directory/
                  docker-compose down
                  docker-compose pull
                  docker-compose up -d
                  EOF
              


